package com.lng.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RestController;

import com.lng.pojo.Department;
import com.lng.service.DepartmentService;
import com.lng.util.GenericResponse;
import com.lng.util.ResponseFormat;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@RestController
@Api(tags = "部门管理")
public class DepartmentController {

	@Autowired
	private DepartmentService ds;
	
	@PostMapping("addDep")
	@ApiOperation(value = "增加部门",notes = "增加部门接口信息")
	@ApiResponses({@ApiResponse(code = 1000, message = "服务器错误"),@ApiResponse(code = 50003, message = "数据已存在")})
	@ApiImplicitParams({
		@ApiImplicitParam(name = "depName", value = "部门名称",  required = true),
		@ApiImplicitParam(name = "description", value = "描述")
	})
	public GenericResponse addDep(String depName,String description) {
		Integer status = 200;
		String uId = "";
		try {
			if(ds.findSpecInfo(depName).size() > 0) {
				status = 50003;
			}else {
				Department dep = new Department(depName,description);
				uId = ds.addOrUpDepartment(dep);
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			status = 1000;
		}
		return ResponseFormat.retParam(status, uId);
	}
	
	@PutMapping("upDep")
	@ApiOperation(value = "修改部门",notes = "修改部门接口信息")
	@ApiResponses({@ApiResponse(code = 1000, message = "服务器错误")
	,@ApiResponse(code = 50003, message = "数据已存在")
	,@ApiResponse(code = 50001, message = "数据未找到")})
	@ApiImplicitParams({
		@ApiImplicitParam(name = "depId", value = "部门编号",  required = true),
		@ApiImplicitParam(name = "depName", value = "部门名称",  required = true),
		@ApiImplicitParam(name = "description", value = "描述")
	})
	public GenericResponse upDep(String depId,String depName,String description) {
		Integer status = 200;
		try {
			Department dep = ds.getEntityById(depId);
			if(dep == null) {
				status = 50001;
			}else {
				if(depName.equals(dep.getDepName())) {//部门相同时不判断
					dep.setDescription(description);
					ds.addOrUpDepartment(dep);
				}else {
					if(ds.findSpecInfo(depName).size() == 0) {
						dep.setDepName(depName);
						dep.setDescription(description);
						ds.addOrUpDepartment(dep);
					}else {
						status = 50003;
					}
				}
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			status = 1000;
		}
		return ResponseFormat.retParam(status, "");
	}
	
	@GetMapping("queryDep")
	@ApiOperation(value = "获取部门信息",notes = "部门编号为空时表示全部部门")
	@ApiResponses({@ApiResponse(code = 1000, message = "服务器错误")
	,@ApiResponse(code = 50003, message = "数据已存在")
	,@ApiResponse(code = 50001, message = "数据未找到")})
	@ApiImplicitParams({
		@ApiImplicitParam(name = "depId", value = "部门编号")
	})
	public GenericResponse queryDep(String depId) {
		Integer status = 200;
		List<Department> dList = new ArrayList<Department>();
		try {
			if(depId.equals("")) {
				dList = ds.findSpecInfo("");
			}else {
				Department dep = ds.getEntityById(depId);
				if(dep == null) {
					status = 50001;
				}else {
					dList.add(dep);
				}
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			status = 1000;
		}
		return ResponseFormat.retParam(status, dList);
	}
}
